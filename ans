

**Question 1: Define a class with a generator which can iterate the numbers divisible by 7 between 0 and n.**

```python
class DivisibleBySeven:
    def __init__(self, n):
        self.n = n

    def generate(self):
        for i in range(self.n + 1):
            if i % 7 == 0:
                yield i

# Example usage:
n = 50
divisible_by_seven = DivisibleBySeven(n)
for num in divisible_by_seven.generate():
    print(num)
```

**Question 2: Write a program to compute the frequency of words from the input and sort them alphabetically.**

```python
input_text = "New to Python or choosing between Python 2 and Python 3? Read Python 2 or Python 3."

word_freq = {}
words = input_text.split()

for word in words:
    word = word.strip('.,?')
    word_freq[word] = word_freq.get(word, 0) + 1

sorted_word_freq = sorted(word_freq.items(), key=lambda x: x[0])

for word, freq in sorted_word_freq:
    print(f"{word}:{freq}")
```

**Question 3: Define a class Person and its two child classes: Male and Female with a "getGender" method.**

```python
class Person:
    def getGender(self):
        pass

class Male(Person):
    def getGender(self):
        return "Male"

class Female(Person):
    def getGender(self):
        return "Female"
```

**Question 4: Generate sentences with subject, verb, and object combinations.**

```python
subjects = ["I", "You"]
verbs = ["Play", "Love"]
objects = ["Hockey", "Football"]

sentences = []

for subject in subjects:
    for verb in verbs:
        for obj in objects:
            sentences.append(f"{subject} {verb} {obj}.")

for sentence in sentences:
    print(sentence)
```

**Question 5: Compress and decompress a string using zlib.**

```python
import zlib

text = "hello world!hello world!hello world!hello world!"
compressed_text = zlib.compress(text.encode())
decompressed_text = zlib.decompress(compressed_text)

print("Original Text:", text)
print("Compressed Text:", compressed_text)
print("Decompressed Text:", decompressed_text.decode())
```

**Question 6: Binary search function for a sorted list.**

```python
def binary_search(sorted_list, target):
    left, right = 0, len(sorted_list) - 1

    while left <= right:
        mid = (left + right) // 2
        if sorted_list[mid] == target:
            return mid
        elif sorted_list[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1  # Element not found

# Example usage:
sorted_list = [1, 3, 5, 7, 9, 11, 13]
target = 7
result = binary_search(sorted_list, target)

if result != -1:
    print(f"Element {target} found at index {result}")
else:
    print(f"Element {target} not found in the list.")
```

These are Python implementations for the tasks you described. You can use and modify them as needed.
